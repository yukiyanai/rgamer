% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normal_form.R
\name{normal_form}
\alias{normal_form}
\title{Define a normal-form (or strategic-form) game}
\usage{
normal_form(
  players = NULL,
  s1 = NULL,
  s2 = NULL,
  p1 = NULL,
  p2 = NULL,
  cells = NULL,
  discretize = FALSE,
  discrete_points = c(6, 6),
  symmetric = FALSE,
  byrow = FALSE,
  pars = NULL,
  par1_lim = NULL,
  par2_lim = NULL,
  cons1 = NULL,
  cons2 = NULL,
  cons_common = NULL
)
}
\arguments{
\item{players}{A character vector of the name (label) for the players.}

\item{s1}{A character vector of pure strategies for Player 1 (row player).
Required only when the player has discrete-choice strategies.}

\item{s2}{A character vector of pure strategies for Player 2 (column player).
Required only when the player has discrete-choice strategies.}

\item{p1}{The payoff of Player1. This argument can be specified in three
different ways. First, it can be a numeric vector of payoffs. Second, it
can be a character string of the payoff function (e.g., p1 = "x^2 - y").
Third, it can be an R function of payoff.}

\item{p2}{The payoff of Player 2. See the explanation of \code{p1}
for detail.}

\item{cells}{A list of vectors to specify the payoff for each cell. Each
element of the list should be a numeric vector of two players' payoffs.}

\item{discretize}{A logical value. Set this \code{TRUE} to evaluate payoff
functions at some discrete values of strategies \code{s1} and \code{s2}.
Default is \code{FALSE}.}

\item{discrete_points}{A numeric vector of length 2 to set how many discrete
points should be used to discretize the game defined by payoff functions.
Default is \code{c(6, 6)}, which shows equally spaced 6 values from the
range of the strategies \code{par1_lim} and \code{par2_lim}. Instead of
setting this parameter, you can specify the vectors of arbitrary
strategies by setting \code{s1} and \code{s2}.}

\item{symmetric}{A logical value. Set this \code{TRUE} when the payoffs for
two players are symmetric as in the prisoners' dilemma. Then, p1 is
recycled for p2. Default is \code{FALSE}.}

\item{byrow}{A logical value. If \code{TRUE}, payoffs will be lined up by
row. Default is \code{FALSE}. Only used when both \code{s1} and \code{s2}
are provided.}

\item{pars}{A character vector of parameters that are selected by players 1
and 2, respectively. Only used when \code{p1} and \code{p2} are specified
by payoff functions (either as character strings or R functions).}

\item{par1_lim}{A numeric vector of length 2, which defines the range of
parameters from which Player 1 chooses her strategy.}

\item{par2_lim}{A numeric vector of length 2, which defines the range of
parameters from which Player 2 chooses his strategy.}

\item{cons1}{A named list of parameters contained in \code{p1} that should be
treated as constants, if any.}

\item{cons2}{A named list of parameters contained in \code{p2} that should be
treated as constants, if any.}

\item{cons_common}{A named list of parameters contained in \code{p1} and
\code{p2} that should be treated as constants, if any. If \code{cons1}
and \code{cons2} are exactly same, you can specify \code{cons_common}
instead of both \code{cons1} and \code{cons2}.}
}
\value{
An object of "normal_form" class, which defines a normal-form (or
strategic-form) game.
}
\description{
\code{normal_form()} defines a normal-form game and
creates an object of "normal_form" class.
}
\details{
Creates an object of "normal_form" class, which can be passed to
functions in order to find solutions of the game.
}
\examples{
game1 <- normal_form(
  s1 = c("T", "B"),
  s2 = c("L", "R"),
  p1 = c(4, 2, 3, 1),
  p2 = c(4, 3, 2, 1),
  players = c("Row Player", "Column Player"))

game1b <- normal_form(
  s1 = c("T", "B"),
  s2 = c("L", "R"),
  cells = list(c(4, 4),
               c(2, 3),
               c(3, 2),
               c(1, 1)),
  players = c("Row Player", "Column Player"))

game2 <- normal_form(
   players = c("A", "B"),
   p1 = "-x1^2 + (28 - x2) * x1",
   p2 = "-x2^2 + (28 - x1) * x2",
   par1_lim = c(0, 30),
   par2_lim = c(0, 30),
   pars = c("x1", "x2"))

fx <- function(x, y, a, b) -x^a + (b - y) * x
fy <- function(x, y, s, t) -y^s + (t - x) * y
game3 <- normal_form(
  p1 = fx,
  p2 = fy,
  pars = c('x', 'y'),
  par1_lim = c(0, 30),
  par2_lim = c(0, 30))

\dontrun{
  ## This throws an error because p1 and p2 are in different forms.
  game4 <- normal_form(
    p1 = fx,
    p2 = "-y^2 + (28 - x) * y",
    pars = c('x', 'y'),
    par1_lim = c(0, 30),
    par2_lim = c(0, 30)
  )
}
}
\author{
Yoshio Kamijo and Yuki Yanai \href{mailto:yanai.yuki@kochi-tech.ac.jp}{yanai.yuki@kochi-tech.ac.jp}
}
